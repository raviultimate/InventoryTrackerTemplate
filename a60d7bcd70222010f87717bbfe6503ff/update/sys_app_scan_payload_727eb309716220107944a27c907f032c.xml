<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_app_scan_payload">
    <sys_app_scan_payload action="INSERT_OR_UPDATE">
        <referenced_table>sys_app</referenced_table>
        <scan_instance>6e0d7bcd212220107f099fc337706afe</scan_instance>
        <serialized_record>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ux_client_script"&gt;&lt;sys_ux_client_script action="INSERT_OR_UPDATE"&gt;&lt;includes/&gt;&lt;macroponent display_value=""&gt;!!!sys_id_1963!!!&lt;/macroponent&gt;&lt;name&gt;Request this item&lt;/name&gt;&lt;required_translations&gt;[ {
  "message" : "Date required can't be in past",
  "comment" : ""
}, {
  "message" : "Please enter a valid requested count",
  "comment" : ""
}, {
  "message" : "Error : something went wrong",
  "comment" : ""
}, {
  "message" : "Stock available is less than count",
  "comment" : ""
}, {
  "message" : "Return date should be after required date",
  "comment" : ""
}, {
  "message" : "Return date should be less than or equal to max loan duration",
  "comment" : ""
} ]&lt;/required_translations&gt;&lt;script&gt;&lt;![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 */
function handler({ api, helpers }) {
    try {
        let requestDate = new Date(api.data.req_form.nowRecordFormBlob.fields.request_date.value);
        let returnDate = api.data.req_form.nowRecordFormBlob.fields.return_date.value;
        let maxLoanDuration = parseInt(api.data.look_up_record_1.result.loan_duration.value);
        let in_stock = parseInt(api.data.look_up_record_1.result.in_stock.value);
        let count = parseInt(api.data.req_form.nowRecordFormBlob.fields.count.value);
        let isNewRecord = api.data.req_form.nowRecordFormBlob.isNewRecord;
        let reqCount = api.data.req_form.nowRecordFormBlob.fields.count.value;

        if(reqCount &lt;= 0) {
            helpers.translate("Please enter a valid requested count").then(value =&gt; {
                api.data.req_form.showFieldMessage({
                        fieldName : "count",
                        message : value,
                        type : "error"
                    });
            });
            return;
        }

        let maxDate;
        if(maxLoanDuration) {
                maxDate = new Date(requestDate);
                maxDate.setDate(requestDate.getDate() + maxLoanDuration);   
        }

        if(!returnDate &amp;&amp; maxDate) {
            returnDate = maxDate;
            api.data.req_form.setValue({
                fieldName: 'return_date',
                value: returnDate.toLocaleDateString().split("/").reverse().join("-") + " " + returnDate.toLocaleTimeString()
            });
        }
        else if(returnDate &amp;&amp; typeof returnDate === "string")
            returnDate = new Date(returnDate);

        if(in_stock &amp;&amp; in_stock &lt; count) {
            helpers.translate("Stock available is less than count").then(value =&gt; {
                api.data.req_form.showFieldMessage({
                        fieldName : "count",
                        message : value,
                        type : "error"
                    });
            });
            return;
        } else if (requestDate.toJSON().substring(0,10) &lt; new Date().toJSON().substring(0,10)) {
            helpers.translate("Date required can't be in past").then(value =&gt; {
                api.data.req_form.showFieldMessage({
                        fieldName : "request_date",
                        message : value,
                        type : "error"
                    });
            });
            return;
        }
        else if(returnDate &amp;&amp; maxDate &amp;&amp; maxDate.getTime() !== returnDate.getTime()) {
            if(requestDate.getTime() &gt; returnDate.getTime()) {
                helpers.translate('Return date should be after required date').then((value) =&gt; {
                    api.data.req_form.showFieldMessage({
                        fieldName : "return_date",
                        message : value,
                        type : "error"
                    });
                });
                return;
            } else if(maxDate.getTime() &lt; returnDate.getTime()) {
                helpers.translate('Return date should be less than or equal to max loan duration').then((value) =&gt; {
                    api.data.req_form.showFieldMessage({
                        fieldName : "return_date",
                        message : value,
                        type : "error"
                    });
                });
                return;
            }
        }
        if(isNewRecord) {
            api.data.req_form.save();
            helpers.navigate.to('confirmation', {
                sysId: api.data.req_form.nowRecordFormBlob.sysId,
                action: 'created'
            });
        } else {
            let status = api.data.req_form.nowRecordFormBlob.fields.request_status.value;
            if(["denied","approved","pending_re_order"].indexOf(status) &gt;= 0) {
                    api.data.req_form.setValue({
                    fieldName: 'request_status',
                    value: "submitted"
                });
            }
            api.data.req_form.save();
            helpers.navigate.to('confirmation', {
                sysId: api.data.req_form.nowRecordFormBlob.sysId,
                action: 'updated'
            });
        }  
    } catch (ex) {
        helpers.translate("Error : something went wrong").then(value =&gt; {
            api.emit("NOW_UXF_PAGE#ADD_NOTIFICATIONS", {
                items: [{
                    status: "critical",
                    icon: "exclamation-triangle-outline",
                    content: value,
                    action: {
                        type: "dismiss"
                    }
                }]
            });
        });
        return;
    }

}]]&gt;&lt;/script&gt;&lt;script_api_version&gt;2.0.0&lt;/script_api_version&gt;&lt;sys_class_name&gt;sys_ux_client_script&lt;/sys_class_name&gt;&lt;sys_created_by/&gt;&lt;sys_created_on/&gt;&lt;sys_id&gt;!!!sys_id_1962!!!&lt;/sys_id&gt;&lt;sys_mod_count/&gt;&lt;sys_name/&gt;&lt;sys_package display_value=""&gt;!!!app_sys_id!!!&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value=""&gt;!!!app_sys_id!!!&lt;/sys_scope&gt;&lt;sys_update_name/&gt;&lt;sys_updated_by/&gt;&lt;sys_updated_on/&gt;&lt;/sys_ux_client_script&gt;&lt;/record_update&gt;</serialized_record>
        <source_class>sys_ux_client_script</source_class>
        <source_id>eb5fae0ac3f31410051653eeb840dd53</source_id>
        <source_name>Request this item</source_name>
        <source_sys_id>d034224153682010e8f7ddeeff7b124e</source_sys_id>
        <sys_class_name>sys_app_scan_payload</sys_class_name>
        <sys_created_by>maint</sys_created_by>
        <sys_created_on>2021-02-24 07:03:30</sys_created_on>
        <sys_id>727eb309716220107944a27c907f032c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>sys_ux_client_script</sys_name>
        <sys_package display_value="Inventory Tracker Template" source="x_snc_inventory_0">a60d7bcd70222010f87717bbfe6503ff</sys_package>
        <sys_policy/>
        <sys_scope display_value="Inventory Tracker Template">a60d7bcd70222010f87717bbfe6503ff</sys_scope>
        <sys_update_name>sys_app_scan_payload_727eb309716220107944a27c907f032c</sys_update_name>
        <sys_updated_by>maint</sys_updated_by>
        <sys_updated_on>2021-02-24 07:03:30</sys_updated_on>
        <version>1</version>
    </sys_app_scan_payload>
</record_update>
